---
/**
 * * Language select dropdown component (for mobile menu)
 * Uses info and utilities from src/js/i18nUtils.ts. Make sure this is updated with the languages you are using (to match the Astro config file)
 * Multiple dropdowns can be used on the same page
 */
import { Icon } from "astro-icon/components";

// utils
import { getLocaleFromUrl } from "@/docs/js/localeUtils";
import { getLocalizedPathname } from "@/docs/js/translationUtils";

// config
import { locales, languageSwitcherMap } from "@/docs/config/siteSettings.json";

interface Props {
	class?: string; // any additional classes
	rest?: any; // catch-all for any additional parameters, such as "aria-label"
}

const { class: className, ...rest } = Astro.props as Props;

const currLocale = getLocaleFromUrl(Astro.url);
---

<div class:list={["mobile-lang__dropdown description group relative text-sm", className]} {...rest}>
	<button
		class="docs-nav__link--base docs-primary-focus mobile-lang__dropdown-button flex w-full flex-1 items-center justify-between gap-0.5 rounded-md py-1 text-left"
		type="button"
		aria-expanded="false"
		aria-haspopup="true"
		aria-controls="mobile-lang__dropdown-content"
	>
		<span class="sr-only">Change language</span>
		<Icon
			name="tabler/language"
			aria-hidden="true"
			class="size-3.5 shrink-0 transition-transform"
		/>
		{languageSwitcherMap[currLocale]}
		<Icon
			name="tabler/chevron-down"
			aria-hidden="true"
			class="mobile-lang__dropdown-chevron mb-auto ml-auto size-5 transition-transform duration-300"
		/>
	</button>

	<div
		class="mobile-lang__dropdown-content hidden max-h-0 overflow-hidden transition-all duration-300 ease-in-out"
	>
		<ul class="mb-2 transition-[height] duration-300">
			{
				locales.map((lang) => (
					<li class="flex w-full text-center">
						<a
							data-astro-reload
							class="docs-primary-focus docs-nav__link--base relative block w-full py-1 whitespace-nowrap"
							href={getLocalizedPathname(lang, Astro.url)}
							aria-label={`Change language to ${lang.toUpperCase()}`}
						>
							{languageSwitcherMap[lang]}
						</a>
					</li>
				))
			}
		</ul>
	</div>
</div>

<script>
	function mobileNavDropdownSetup() {
		const dropdownMenus = document.querySelectorAll(
			".mobile-lang__dropdown",
		) as NodeListOf<HTMLElement>;
		dropdownMenus.forEach((dropdownMenu) => {
			const dropdownButton = dropdownMenu.querySelector(
				".mobile-lang__dropdown-button",
			) as HTMLElement;
			const dropdownChevron = dropdownMenu.querySelector(
				".mobile-lang__dropdown-chevron",
			) as HTMLElement;
			const dropdownContent = dropdownMenu.querySelector(
				".mobile-lang__dropdown-content",
			) as HTMLElement;

			if (dropdownButton && dropdownContent && dropdownChevron) {
				dropdownButton.addEventListener("click", (event) => {
					if (!dropdownMenu.classList.contains("active")) {
						// if dropdown is currently closed, so open it
						dropdownMenu.classList.add("active");
						dropdownButton.setAttribute("aria-expanded", "true");

						// set max-height to the height of the dropdown content
						// this makes it animate properly
						dropdownContent.classList.remove("hidden");
						dropdownContent.style.maxHeight = dropdownContent.scrollHeight + "px";
						dropdownChevron.classList.add("rotate-180");

						// close all other dropdowns
						dropdownMenus.forEach((otherDropdownMenu) => {
							if (otherDropdownMenu !== dropdownMenu) {
								otherDropdownMenu.classList.remove("active");
								otherDropdownMenu
									.querySelector(".mobile-lang__dropdown-button")
									?.setAttribute("aria-expanded", "false");
								otherDropdownMenu
									.querySelector(".mobile-lang__dropdown-content")
									?.setAttribute("style", "max-height: 0px");
								otherDropdownMenu
									.querySelector(".mobile-lang__dropdown-chevron")
									?.classList.remove("rotate-180");
								setTimeout(() => {
									otherDropdownMenu
										.querySelector(".mobile-lang__dropdown-content")
										?.classList.add("hidden");
								}, 300);
							}
						});
					} else {
						// dropdown is currently open, so close it
						dropdownMenu.classList.remove("active");
						dropdownButton.setAttribute("aria-expanded", "false");

						// set max-height to the height of the dropdown content
						// this makes it animate properly
						dropdownContent.style.maxHeight = "0px";
						dropdownChevron.classList.remove("rotate-180");
						// delay to allow close animation
						setTimeout(() => {
							dropdownContent.classList.add("hidden");
						}, 300);
					}
					event.preventDefault();
					return false;
				});
			}
		});
	}

	// runs on initial page load
	mobileNavDropdownSetup();

	// runs on view transitions navigation
	document.addEventListener("astro:after-swap", mobileNavDropdownSetup);
</script>
