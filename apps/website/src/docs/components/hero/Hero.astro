---
import { getRelativeLocaleUrl } from "astro:i18n";

import Button from "@/docs/components/button/Button.astro";
import { getLocaleFromUrl } from "@/docs/js/localeUtils";
import { useTranslations } from "@/docs/js/translationUtils";

const currLocale = getLocaleFromUrl(Astro.url);
const t = useTranslations(currLocale);
---

<div class="pointer-events-none absolute inset-0 z-50 overflow-hidden md:hidden">
	<div class="docs-site-container relative flex">
		<div
			class="from-foreground/50 dark:from-foreground/20 pointer-events-none absolute -top-[500px] -left-[100px] h-[1000px] w-[200px] -rotate-45 bg-gradient-to-b to-transparent blur-2xl"
		>
		</div>
	</div>
</div>

<!-- Hero Section -->
<div id="main-content" class="docs-site-container relative border-x py-20 md:py-32">
	<!-- Beam effects -->
	<div class="pointer-events-none absolute inset-0 overflow-hidden">
		<!-- Top-left beam -->
		<div class="absolute inset-0 z-10 hidden md:block">
			<div class="docs-site-container relative flex h-14">
				<div
					class="from-foreground/50 dark:from-foreground/20 pointer-events-none absolute -top-[500px] -left-[100px] h-[1000px] w-[200px] -rotate-45 bg-gradient-to-b to-transparent blur-2xl"
				>
				</div>
			</div>
		</div>
		<!-- Top-right beam -->
		<div class="absolute inset-0 z-10 hidden md:block">
			<div class="docs-site-container relative flex h-14">
				<div
					class="from-foreground/50 dark:from-foreground/20 pointer-events-none absolute -top-[500px] -right-[100px] h-[1000px] w-[200px] rotate-45 bg-gradient-to-b to-transparent blur-2xl"
				>
				</div>
			</div>
		</div>
	</div>

	<div class="mx-auto max-w-[800px] text-center">
		<div class="flex justify-center">
			<h1 class="mb-6 text-4xl leading-12 font-semibold md:text-5xl md:leading-15">
				Create <span class="rounded-md border px-1 py-0.5"
					><span id="animated-word" class="inline-block">beautiful</span></span
				> documentation websites with
				<span class="docs-text-gradient">Pathfinder</span>
			</h1>
		</div>
		<p class="text-muted-foreground mb-8 text-lg text-pretty md:text-xl">
			{t("hero_description")}
		</p>
		<div class="flex flex-wrap items-center justify-center gap-4">
			<Button href={getRelativeLocaleUrl(currLocale, "/docs/getting-started")} variant="secondary">
				Get Started
			</Button>
			<Button href={getRelativeLocaleUrl(currLocale, "/docs/components")} variant="ghost">
				Components
			</Button>
		</div>
	</div>
</div>

<script>
	import anime from "animejs";

	const words = ["unique", "powerful", "premium"];
	const wordElement = document.getElementById("animated-word");
	let currentIndex = 0;

	// Calculate exact width needed for the longest word
	function updateContainerWidth() {
		if (!wordElement) return;

		// Create temporary span to measure actual text width
		const temp = document.createElement("span");
		temp.style.visibility = "hidden";
		temp.style.position = "absolute";
		temp.style.fontSize = window.getComputedStyle(wordElement).fontSize;
		temp.style.fontFamily = window.getComputedStyle(wordElement).fontFamily;

		// Find the widest word
		let maxWidth = 0;
		words.forEach((word) => {
			temp.textContent = word;
			document.body.appendChild(temp);
			const width = temp.getBoundingClientRect().width + 8;
			maxWidth = Math.max(maxWidth, width);
			document.body.removeChild(temp);
		});

		// Set container width to match longest word
		wordElement.style.minWidth = `${maxWidth}px`;
	}

	function createLetterSpans(word) {
		return word
			.split("")
			.map((letter) => `<span class="letter">${letter}</span>`)
			.join("");
	}

	function animateText() {
		// First fade out all letters of current word
		anime({
			targets: "#animated-word .letter",
			opacity: 0,
			duration: 300,
			easing: "easeInOutQuad",
			complete: () => {
				// Change text
				if (wordElement) {
					currentIndex = (currentIndex + 1) % words.length;
					const newWord = words[currentIndex];
					wordElement.innerHTML = createLetterSpans(newWord);

					// Animate each letter in sequence
					anime({
						targets: "#animated-word .letter",
						opacity: [0, 1],
						duration: 200,
						delay: anime.stagger(50),
						easing: "easeInOutQuad",
					});
				}
			},
		});
	}

	// Initialize
	if (wordElement) {
		wordElement.innerHTML = createLetterSpans(words[0]);
		updateContainerWidth();
		// Initial animation
		anime({
			targets: "#animated-word .letter",
			opacity: [0, 1],
			duration: 200,
			delay: anime.stagger(50),
			easing: "easeInOutQuad",
		});
	}

	// Update width on window resize
	window.addEventListener("resize", updateContainerWidth);

	// Start animation loop
	setInterval(animateText, 3000);
</script>

<style>
	#animated-word {
		opacity: 1;
		display: inline-block;
		min-width: 0;
		text-align: center;
	}

	.letter {
		opacity: 0;
		display: inline-block;
	}
</style>
